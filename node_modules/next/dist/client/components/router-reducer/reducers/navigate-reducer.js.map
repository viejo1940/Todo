{"version":3,"sources":["../../../../../src/client/components/router-reducer/reducers/navigate-reducer.ts"],"sourcesContent":["import type { CacheNode } from '../../../../shared/lib/app-router-context.shared-runtime'\nimport type {\n  FlightRouterState,\n  FlightSegmentPath,\n} from '../../../../server/app-render/types'\nimport { fetchServerResponse } from '../fetch-server-response'\nimport { createHrefFromUrl } from '../create-href-from-url'\nimport { invalidateCacheBelowFlightSegmentPath } from '../invalidate-cache-below-flight-segmentpath'\nimport { applyRouterStatePatchToTree } from '../apply-router-state-patch-to-tree'\nimport { shouldHardNavigate } from '../should-hard-navigate'\nimport { isNavigatingToNewRootLayout } from '../is-navigating-to-new-root-layout'\nimport {\n  PrefetchCacheEntryStatus,\n  type Mutable,\n  type NavigateAction,\n  type ReadonlyReducerState,\n  type ReducerState,\n} from '../router-reducer-types'\nimport { handleMutable } from '../handle-mutable'\nimport { applyFlightData } from '../apply-flight-data'\nimport { prefetchQueue } from './prefetch-reducer'\nimport { createEmptyCacheNode } from '../../app-router'\nimport { DEFAULT_SEGMENT_KEY } from '../../../../shared/lib/segment'\nimport { listenForDynamicRequest, startPPRNavigation } from '../ppr-navigations'\nimport {\n  getOrCreatePrefetchCacheEntry,\n  prunePrefetchCache,\n} from '../prefetch-cache-utils'\nimport { clearCacheNodeDataForSegmentPath } from '../clear-cache-node-data-for-segment-path'\nimport { handleAliasedPrefetchEntry } from '../aliased-prefetch-navigations'\nimport {\n  navigate as navigateUsingSegmentCache,\n  NavigationResultTag,\n  type NavigationResult,\n} from '../../segment-cache/navigation'\n\nexport function handleExternalUrl(\n  state: ReadonlyReducerState,\n  mutable: Mutable,\n  url: string,\n  pendingPush: boolean\n) {\n  mutable.mpaNavigation = true\n  mutable.canonicalUrl = url\n  mutable.pendingPush = pendingPush\n  mutable.scrollableSegments = undefined\n\n  return handleMutable(state, mutable)\n}\n\nfunction generateSegmentsFromPatch(\n  flightRouterPatch: FlightRouterState\n): FlightSegmentPath[] {\n  const segments: FlightSegmentPath[] = []\n  const [segment, parallelRoutes] = flightRouterPatch\n\n  if (Object.keys(parallelRoutes).length === 0) {\n    return [[segment]]\n  }\n\n  for (const [parallelRouteKey, parallelRoute] of Object.entries(\n    parallelRoutes\n  )) {\n    for (const childSegment of generateSegmentsFromPatch(parallelRoute)) {\n      // If the segment is empty, it means we are at the root of the tree\n      if (segment === '') {\n        segments.push([parallelRouteKey, ...childSegment])\n      } else {\n        segments.push([segment, parallelRouteKey, ...childSegment])\n      }\n    }\n  }\n\n  return segments\n}\n\nfunction triggerLazyFetchForLeafSegments(\n  newCache: CacheNode,\n  currentCache: CacheNode,\n  flightSegmentPath: FlightSegmentPath,\n  treePatch: FlightRouterState\n) {\n  let appliedPatch = false\n\n  newCache.rsc = currentCache.rsc\n  newCache.prefetchRsc = currentCache.prefetchRsc\n  newCache.loading = currentCache.loading\n  newCache.parallelRoutes = new Map(currentCache.parallelRoutes)\n\n  const segmentPathsToFill = generateSegmentsFromPatch(treePatch).map(\n    (segment) => [...flightSegmentPath, ...segment]\n  )\n\n  for (const segmentPaths of segmentPathsToFill) {\n    clearCacheNodeDataForSegmentPath(newCache, currentCache, segmentPaths)\n\n    appliedPatch = true\n  }\n\n  return appliedPatch\n}\n\nfunction handleNavigationResult(\n  state: ReadonlyReducerState,\n  mutable: Mutable,\n  pendingPush: boolean,\n  result: NavigationResult\n): ReducerState {\n  switch (result.tag) {\n    case NavigationResultTag.MPA: {\n      // Perform an MPA navigation.\n      const newUrl = result.data\n      return handleExternalUrl(state, mutable, newUrl, pendingPush)\n    }\n    case NavigationResultTag.NoOp:\n      // The server responded with no change to the current page.\n      return handleMutable(state, mutable)\n    case NavigationResultTag.Success: {\n      // Received a new result.\n      mutable.cache = result.data.cacheNode\n      mutable.patchedTree = result.data.flightRouterState\n      mutable.canonicalUrl = result.data.canonicalUrl\n      mutable.scrollableSegments = result.data.scrollableSegments\n      mutable.shouldScroll = result.data.shouldScroll\n      // TODO: Not yet implemented\n      // mutable.hashFragment = hash\n      return handleMutable(state, mutable)\n    }\n    case NavigationResultTag.Async: {\n      return result.data.then(\n        (asyncResult) =>\n          handleNavigationResult(state, mutable, pendingPush, asyncResult),\n        // If the navigation failed, return the current state.\n        // TODO: This matches the current behavior but we need to do something\n        // better here if the network fails.\n        () => {\n          return state\n        }\n      )\n    }\n    default:\n      const _exhaustiveCheck: never = result\n      return state\n  }\n}\n\nexport function navigateReducer(\n  state: ReadonlyReducerState,\n  action: NavigateAction\n): ReducerState {\n  const { url, isExternalUrl, navigateType, shouldScroll, allowAliasing } =\n    action\n  const mutable: Mutable = {}\n  const { hash } = url\n  const href = createHrefFromUrl(url)\n  const pendingPush = navigateType === 'push'\n  // we want to prune the prefetch cache on every navigation to avoid it growing too large\n  prunePrefetchCache(state.prefetchCache)\n\n  mutable.preserveCustomHistoryState = false\n  mutable.pendingPush = pendingPush\n\n  if (isExternalUrl) {\n    return handleExternalUrl(state, mutable, url.toString(), pendingPush)\n  }\n\n  // Handles case where `<meta http-equiv=\"refresh\">` tag is present,\n  // which will trigger an MPA navigation.\n  if (document.getElementById('__next-page-redirect')) {\n    return handleExternalUrl(state, mutable, href, pendingPush)\n  }\n\n  if (process.env.__NEXT_CLIENT_SEGMENT_CACHE) {\n    // (Very Early Experimental Feature) Segment Cache\n    //\n    // Bypass the normal prefetch cache and use the new per-segment cache\n    // implementation instead. This is only supported if PPR is enabled, too.\n    //\n    // Temporary glue code between the router reducer and the new navigation\n    // implementation. Eventually we'll rewrite the router reducer to a\n    // state machine.\n    // TODO: Currently this always returns an async result, but in the future\n    // it will return a sync result if the navigation was prefetched. Hence\n    // a result type that's more complicated than you might expect.\n    const result = navigateUsingSegmentCache(\n      url,\n      state.cache,\n      state.tree,\n      state.nextUrl,\n      shouldScroll\n    )\n    return handleNavigationResult(state, mutable, pendingPush, result)\n  }\n\n  const prefetchValues = getOrCreatePrefetchCacheEntry({\n    url,\n    nextUrl: state.nextUrl,\n    tree: state.tree,\n    prefetchCache: state.prefetchCache,\n    allowAliasing,\n  })\n  const { treeAtTimeOfPrefetch, data } = prefetchValues\n\n  prefetchQueue.bump(data)\n\n  return data.then(\n    ({ flightData, canonicalUrl: canonicalUrlOverride, postponed }) => {\n      let isFirstRead = false\n      // we only want to mark this once\n      if (!prefetchValues.lastUsedTime) {\n        // important: we should only mark the cache node as dirty after we unsuspend from the call above\n        prefetchValues.lastUsedTime = Date.now()\n        isFirstRead = true\n      }\n\n      // Handle case when navigating to page in `pages` from `app`\n      if (typeof flightData === 'string') {\n        return handleExternalUrl(state, mutable, flightData, pendingPush)\n      }\n\n      const updatedCanonicalUrl = canonicalUrlOverride\n        ? createHrefFromUrl(canonicalUrlOverride)\n        : href\n\n      const onlyHashChange =\n        !!hash &&\n        state.canonicalUrl.split('#', 1)[0] ===\n          updatedCanonicalUrl.split('#', 1)[0]\n\n      // If only the hash has changed, the server hasn't sent us any new data. We can just update\n      // the mutable properties responsible for URL and scroll handling and return early.\n      if (onlyHashChange) {\n        mutable.onlyHashChange = true\n        mutable.canonicalUrl = updatedCanonicalUrl\n        mutable.shouldScroll = shouldScroll\n        mutable.hashFragment = hash\n        mutable.scrollableSegments = []\n        return handleMutable(state, mutable)\n      }\n\n      if (prefetchValues.aliased) {\n        const result = handleAliasedPrefetchEntry(\n          state,\n          flightData,\n          url,\n          mutable\n        )\n\n        // We didn't return new router state because we didn't apply the aliased entry for some reason.\n        // We'll re-invoke the navigation handler but ensure that we don't attempt to use the aliased entry. This\n        // will create an on-demand prefetch entry.\n        if (result === false) {\n          return navigateReducer(state, { ...action, allowAliasing: false })\n        }\n\n        return result\n      }\n\n      let currentTree = state.tree\n      let currentCache = state.cache\n      let scrollableSegments: FlightSegmentPath[] = []\n      for (const normalizedFlightData of flightData) {\n        const {\n          pathToSegment: flightSegmentPath,\n          seedData,\n          head,\n          isHeadPartial,\n          isRootRender,\n        } = normalizedFlightData\n        let treePatch = normalizedFlightData.tree\n\n        // TODO-APP: remove ''\n        const flightSegmentPathWithLeadingEmpty = ['', ...flightSegmentPath]\n\n        // Create new tree based on the flightSegmentPath and router state patch\n        let newTree = applyRouterStatePatchToTree(\n          // TODO-APP: remove ''\n          flightSegmentPathWithLeadingEmpty,\n          currentTree,\n          treePatch,\n          href\n        )\n\n        // If the tree patch can't be applied to the current tree then we use the tree at time of prefetch\n        // TODO-APP: This should instead fill in the missing pieces in `currentTree` with the data from `treeAtTimeOfPrefetch`, then apply the patch.\n        if (newTree === null) {\n          newTree = applyRouterStatePatchToTree(\n            // TODO-APP: remove ''\n            flightSegmentPathWithLeadingEmpty,\n            treeAtTimeOfPrefetch,\n            treePatch,\n            href\n          )\n        }\n\n        if (newTree !== null) {\n          if (\n            // This is just a paranoid check. When a route is PPRed, the server\n            // will send back a static response that's rendered from\n            // the root. If for some reason it doesn't, we fall back to the\n            // non-PPR implementation.\n            // TODO: We should get rid of the else branch and do all navigations\n            // via startPPRNavigation. The current structure is just\n            // an incremental step.\n            seedData &&\n            isRootRender &&\n            postponed\n          ) {\n            const task = startPPRNavigation(\n              currentCache,\n              currentTree,\n              treePatch,\n              seedData,\n              head,\n              isHeadPartial,\n              scrollableSegments\n            )\n\n            if (task !== null) {\n              if (task.route === null) {\n                // Detected a change to the root layout. Perform an full-\n                // page navigation.\n                return handleExternalUrl(state, mutable, href, pendingPush)\n              }\n              // Use the tree computed by startPPRNavigation instead\n              // of the one computed by applyRouterStatePatchToTree.\n              // TODO: We should remove applyRouterStatePatchToTree\n              // from the PPR path entirely.\n              const patchedRouterState: FlightRouterState = task.route\n              newTree = patchedRouterState\n\n              const newCache = task.node\n              if (newCache !== null) {\n                // We've created a new Cache Node tree that contains a prefetched\n                // version of the next page. This can be rendered instantly.\n                mutable.cache = newCache\n              }\n              const dynamicRequestTree = task.dynamicRequestTree\n              if (dynamicRequestTree !== null) {\n                // The prefetched tree has dynamic holes in it. We initiate a\n                // dynamic request to fill them in.\n                //\n                // Do not block on the result. We'll immediately render the Cache\n                // Node tree and suspend on the dynamic parts. When the request\n                // comes in, we'll fill in missing data and ping React to\n                // re-render. Unlike the lazy fetching model in the non-PPR\n                // implementation, this is modeled as a single React update +\n                // streaming, rather than multiple top-level updates. (However,\n                // even in the new model, we'll still need to sometimes update the\n                // root multiple times per navigation, like if the server sends us\n                // a different response than we expected. For now, we revert back\n                // to the lazy fetching mechanism in that case.)\n                const dynamicRequest = fetchServerResponse(url, {\n                  flightRouterState: dynamicRequestTree,\n                  nextUrl: state.nextUrl,\n                })\n\n                listenForDynamicRequest(task, dynamicRequest)\n                // We store the dynamic request on the `lazyData` property of the CacheNode\n                // because we're not going to await the dynamic request here. Since we're not blocking\n                // on the dynamic request, `layout-router` will\n                // task.node.lazyData = dynamicRequest\n              } else {\n                // The prefetched tree does not contain dynamic holes — it's\n                // fully static. We can skip the dynamic request.\n              }\n            } else {\n              // Nothing changed, so reuse the old cache.\n              // TODO: What if the head changed but not any of the segment data?\n              // Is that possible? If so, we should clone the whole tree and\n              // update the head.\n              newTree = treePatch\n            }\n          } else {\n            // The static response does not include any dynamic holes, so\n            // there's no need to do a second request.\n            // TODO: As an incremental step this just reverts back to the\n            // non-PPR implementation. We can simplify this branch further,\n            // given that PPR prefetches are always static and return the whole\n            // tree. Or in the meantime we could factor it out into a\n            // separate function.\n\n            if (isNavigatingToNewRootLayout(currentTree, newTree)) {\n              return handleExternalUrl(state, mutable, href, pendingPush)\n            }\n\n            const cache: CacheNode = createEmptyCacheNode()\n            let applied = false\n\n            if (\n              prefetchValues.status === PrefetchCacheEntryStatus.stale &&\n              !isFirstRead\n            ) {\n              // When we have a stale prefetch entry, we only want to re-use the loading state of the route we're navigating to, to support instant loading navigations\n              // this will trigger a lazy fetch for the actual page data by nulling the `rsc` and `prefetchRsc` values for page data,\n              // while copying over the `loading` for the segment that contains the page data.\n              // We only do this on subsequent reads, as otherwise there'd be no loading data to re-use.\n\n              // We skip this branch if only the hash fragment has changed, as we don't want to trigger a lazy fetch in that case\n              applied = triggerLazyFetchForLeafSegments(\n                cache,\n                currentCache,\n                flightSegmentPath,\n                treePatch\n              )\n              // since we re-used the stale cache's loading state & refreshed the data,\n              // update the `lastUsedTime` so that it can continue to be re-used for the next 30s\n              prefetchValues.lastUsedTime = Date.now()\n            } else {\n              applied = applyFlightData(\n                currentCache,\n                cache,\n                normalizedFlightData,\n                prefetchValues\n              )\n            }\n\n            const hardNavigate = shouldHardNavigate(\n              // TODO-APP: remove ''\n              flightSegmentPathWithLeadingEmpty,\n              currentTree\n            )\n\n            if (hardNavigate) {\n              // Copy rsc for the root node of the cache.\n              cache.rsc = currentCache.rsc\n              cache.prefetchRsc = currentCache.prefetchRsc\n\n              invalidateCacheBelowFlightSegmentPath(\n                cache,\n                currentCache,\n                flightSegmentPath\n              )\n              // Ensure the existing cache value is used when the cache was not invalidated.\n              mutable.cache = cache\n            } else if (applied) {\n              mutable.cache = cache\n              // If we applied the cache, we update the \"current cache\" value so any other\n              // segments in the FlightDataPath will be able to reference the updated cache.\n              currentCache = cache\n            }\n\n            for (const subSegment of generateSegmentsFromPatch(treePatch)) {\n              const scrollableSegmentPath = [\n                ...flightSegmentPath,\n                ...subSegment,\n              ]\n              // Filter out the __DEFAULT__ paths as they shouldn't be scrolled to in this case.\n              if (\n                scrollableSegmentPath[scrollableSegmentPath.length - 1] !==\n                DEFAULT_SEGMENT_KEY\n              ) {\n                scrollableSegments.push(scrollableSegmentPath)\n              }\n            }\n          }\n\n          currentTree = newTree\n        }\n      }\n\n      mutable.patchedTree = currentTree\n      mutable.canonicalUrl = updatedCanonicalUrl\n      mutable.scrollableSegments = scrollableSegments\n      mutable.hashFragment = hash\n      mutable.shouldScroll = shouldScroll\n\n      return handleMutable(state, mutable)\n    },\n    () => state\n  )\n}\n"],"names":["handleExternalUrl","navigateReducer","state","mutable","url","pendingPush","mpaNavigation","canonicalUrl","scrollableSegments","undefined","handleMutable","generateSegmentsFromPatch","flightRouterPatch","segments","segment","parallelRoutes","Object","keys","length","parallelRouteKey","parallelRoute","entries","childSegment","push","triggerLazyFetchForLeafSegments","newCache","currentCache","flightSegmentPath","treePatch","appliedPatch","rsc","prefetchRsc","loading","Map","segmentPathsToFill","map","segmentPaths","clearCacheNodeDataForSegmentPath","handleNavigationResult","result","tag","NavigationResultTag","MPA","newUrl","data","NoOp","Success","cache","cacheNode","patchedTree","flightRouterState","shouldScroll","Async","then","asyncResult","_exhaustiveCheck","action","isExternalUrl","navigateType","allowAliasing","hash","href","createHrefFromUrl","prunePrefetchCache","prefetchCache","preserveCustomHistoryState","toString","document","getElementById","process","env","__NEXT_CLIENT_SEGMENT_CACHE","navigateUsingSegmentCache","tree","nextUrl","prefetchValues","getOrCreatePrefetchCacheEntry","treeAtTimeOfPrefetch","prefetchQueue","bump","flightData","canonicalUrlOverride","postponed","isFirstRead","lastUsedTime","Date","now","updatedCanonicalUrl","onlyHashChange","split","hashFragment","aliased","handleAliasedPrefetchEntry","currentTree","normalizedFlightData","pathToSegment","seedData","head","isHeadPartial","isRootRender","flightSegmentPathWithLeadingEmpty","newTree","applyRouterStatePatchToTree","task","startPPRNavigation","route","patchedRouterState","node","dynamicRequestTree","dynamicRequest","fetchServerResponse","listenForDynamicRequest","isNavigatingToNewRootLayout","createEmptyCacheNode","applied","status","PrefetchCacheEntryStatus","stale","applyFlightData","hardNavigate","shouldHardNavigate","invalidateCacheBelowFlightSegmentPath","subSegment","scrollableSegmentPath","DEFAULT_SEGMENT_KEY"],"mappings":"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"}