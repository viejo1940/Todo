'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    AsyncMetadata: null,
    AsyncMetadataOutlet: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AsyncMetadata: function() {
        return AsyncMetadata;
    },
    AsyncMetadataOutlet: function() {
        return AsyncMetadataOutlet;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _useserverinsertedmetadata = require("../../server/app-render/metadata-insertion/use-server-inserted-metadata");
function ServerInsertMetadata({ promise }) {
    // Apply use() to the metadata promise to suspend the rendering in SSR.
    const { metadata } = (0, _react.use)(promise);
    // Insert metadata into the HTML stream through the `useServerInsertedMetadata`
    (0, _useserverinsertedmetadata.useServerInsertedMetadata)(()=>metadata);
    return null;
}
function BrowserResolvedMetadata({ promise }) {
    const { metadata, error } = (0, _react.use)(promise);
    // If there's metadata error on client, discard the browser metadata
    // and let metadata outlet deal with the error. This will avoid the duplication metadata.
    if (error) return null;
    return metadata;
}
function AsyncMetadata({ promise }) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
        children: typeof window === 'undefined' ? /*#__PURE__*/ (0, _jsxruntime.jsx)(ServerInsertMetadata, {
            promise: promise
        }) : /*#__PURE__*/ (0, _jsxruntime.jsx)(BrowserResolvedMetadata, {
            promise: promise
        })
    });
}
function MetadataOutlet({ promise }) {
    const { error, digest } = (0, _react.use)(promise);
    if (error) {
        if (digest) {
            // The error will lose its original digest after passing from server layer to client layerï¼›
            // We recover the digest property here to override the React created one if original digest exists.
            ;
            error.digest = digest;
        }
        throw error;
    }
    return null;
}
function AsyncMetadataOutlet({ promise }) {
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Suspense, {
        fallback: null,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MetadataOutlet, {
            promise: promise
        })
    });
}

//# sourceMappingURL=async-metadata.js.map